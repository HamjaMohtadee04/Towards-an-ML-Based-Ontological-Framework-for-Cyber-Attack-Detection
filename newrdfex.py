# -*- coding: utf-8 -*-
"""newrdfex.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SkeY0ZO5PqPZIU8fESa7Lhjr5wOJwPEP
"""

!pip install rdflib
!pip install files
!pip install nbformat
import nbformat
from google.colab import files
import files
import urllib.parse
import pandas as pd #for handling csv and csv contents
from rdflib import Graph, Literal, RDF, URIRef, Namespace #basic RDF handling
from rdflib.namespace import FOAF , XSD #most common namespaces
import urllib.parse #for parsing strings to URI's

csvFile = pd.read_csv('/content/drive/MyDrive/archive (1)/NUSW-NB15_features.csv', encoding='latin-1')
df=csvFile;
display(df)

g = Graph()

# Define namespaces
ex = Namespace("http://example.org/")  # You can change the namespace URI as per your preference
schema = Namespace("http://schema.org/")

# Add namespaces to the graph
g.bind("ex", ex)
g.bind("schema", schema)

# Iterate over the rows of the dataset and define RDF triples
for index, row in df.iterrows():
    # Define URI for the feature
    feature_uri = ex[urllib.parse.quote(row['Name'].replace(' ', '_').replace('/', '_'))]


    # Add properties as RDF triples
    g.add((feature_uri, RDF.type, ex['Feature']))
    g.add((feature_uri, ex['hasName'], Literal(row['Name'], datatype=XSD.string)))
    g.add((feature_uri, ex['hasType'], Literal(row['Type '], datatype=XSD.string)))
    g.add((feature_uri, ex['hasDescription'], Literal(row['Description'], datatype=XSD.string)))


print(g.serialize(format="turtle").encode("UTF-8").decode("UTF-8"))

print(df.columns)